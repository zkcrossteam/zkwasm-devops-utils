name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # CHART_NAME will be determined from repo name in generate-helm.sh if not provided via vars.CHART_NAME

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Convert to lowercase
        id: lowercase
        run: |
          echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long

      - name: Verify secrets
        run: |
          echo "Verifying secrets are set (not showing values for security)..."
          if [ -z "${{ secrets.SERVER_ADMIN_KEY }}" ]; then
            echo "Warning: SERVER_ADMIN_KEY is not set or empty"
          else
            echo "SERVER_ADMIN_KEY is set"
          fi
          
          if [ -z "${{ secrets.SETTLER_PRIVATE_ACCOUNT }}" ]; then
            echo "Warning: SETTLER_PRIVATE_ACCOUNT is not set or empty"
          else
            echo "SETTLER_PRIVATE_ACCOUNT is set"
          fi
          
          if [ -z "${{ secrets.USER_ADDRESS }}" ]; then
            echo "Warning: USER_ADDRESS is not set or empty"
          else
            echo "USER_ADDRESS is set"
          fi

      # Set up cache for Docker layers
      - name: Set up Docker layer caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          file: Dockerfile.ci
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Updated secrets format with quotes
          secrets: |
            "SERVER_ADMIN_KEY=${{ secrets.SERVER_ADMIN_KEY }}"
            "SETTLER_PRIVATE_ACCOUNT=${{ secrets.SETTLER_PRIVATE_ACCOUNT }}"
            "USER_ADDRESS=${{ secrets.USER_ADDRESS }}"
          # Add build args as a fallback
          build-args: |
            USER_ADDRESS=${{ secrets.USER_ADDRESS }}
            CHAIN_ID=${{ vars.CHAIN_ID || '11155111' }}
            CREATOR_ONLY_ADD_PROVE_TASK=${{ vars.CREATOR_ONLY_ADD_PROVE_TASK || 'true' }}
          # Improved caching configuration
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha,scope=${{ github.workflow }}
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,scope=${{ github.workflow }},mode=max
          # Add build options for better performance
          platforms: linux/amd64
          provenance: false
          
      # Move cache to prevent it from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Generate image info
        id: image_info
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "Image built and pushed successfully"
          echo "Image: ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          
          echo "WASM files were built during Docker build process"
          echo "Extracting WASM MD5 from the Docker container..."
          
          # Create a container from the image but don't run it
          CONTAINER_ID=$(docker create ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest)
          
          # Extract the wasm.md5 file from the container
          mkdir -p build-artifacts
          docker cp $CONTAINER_ID:/app/ts/wasm.md5 build-artifacts/
          
          # Remove the container
          docker rm $CONTAINER_ID
          
          # Display the MD5 and set as output
          if [ -f build-artifacts/wasm.md5 ]; then
            WASM_MD5=$(cat build-artifacts/wasm.md5)
            echo "WASM MD5: $WASM_MD5"
            echo "wasm_md5=$WASM_MD5" >> $GITHUB_OUTPUT
          else
            echo "Warning: Could not extract WASM MD5 from Docker image"
            echo "wasm_md5=unknown" >> $GITHUB_OUTPUT
          fi
          
      # Notify with WASM Image MD5 using GitHub's notification system
      - name: Notify with WASM Image MD5
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "::notice title=Build Completed Successfully::WASM Image MD5 (IMAGE_VALUE): ${{ steps.image_info.outputs.wasm_md5 }}"
          
      # Create a summary with build details that will be emailed to subscribers
      - name: Create GitHub Step Summary
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "## WASM Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### WASM Image Information" >> $GITHUB_STEP_SUMMARY
          echo "- **WASM Image MD5 (IMAGE_VALUE):** ${{ steps.image_info.outputs.wasm_md5 }}" >> $GITHUB_STEP_SUMMARY

      # Add this step to save the repo name for the deploy job
      - name: Save repo info for deploy job
        id: save_repo_info
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "REPO_LOWER=${REPO_LOWER}" >> $GITHUB_OUTPUT

  # deploy job commented out as requested - only using CI to build docker image and publish WASM
  # deploy:
  #   needs: build
  #   if: github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   environment: production
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     
  #   - name: Set up Helm
  #     uses: azure/setup-helm@v3
  #     with:
  #       version: 'latest'
  #       
  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'latest'
  #       
  #   - name: Configure Kubernetes credentials
  #     run: |
  #       echo "Creating kubeconfig file from secret..."
  #       mkdir -p $HOME/.kube
  #       
  #       # Check if KUBE_CONFIG is base64 encoded
  #       if [[ "${{ secrets.KUBE_CONFIG }}" == *"apiVersion"* ]]; then
  #         # Not base64 encoded, use directly
  #         echo "KUBE_CONFIG appears to be in plain text format"
  #         echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
  #       else
  #         # Try to decode base64
  #         echo "KUBE_CONFIG appears to be base64 encoded, attempting to decode"
  #         echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config || {
  #           echo "Failed to decode KUBE_CONFIG as base64, using as-is"
  #           echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
  #         }
  #       fi
  #       
  #       chmod 600 $HOME/.kube/config
  #       
  #       # Validate kubeconfig format
  #       echo "Validating kubeconfig format..."
  #       if grep -q "apiVersion:" $HOME/.kube/config; then
  #         echo "Kubeconfig appears to be in YAML format"
  #       elif grep -q "\"apiVersion\":" $HOME/.kube/config; then
  #         echo "Kubeconfig appears to be in JSON format"
  #       else
  #         echo "WARNING: Kubeconfig does not contain apiVersion field, it may be invalid"
  #         echo "First 10 lines of kubeconfig (sanitized):"
  #         head -n 10 $HOME/.kube/config | sed 's/\(server: \).*/\1https:\/\/xxx.xxx.xxx.xxx/g'
  #       fi
  #       
  #       echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
        
  #   # Add this step to set the repo name in the deploy job
  #   - name: Set repository name
  #     run: |
  #       echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
  #       
  #   - name: Generate Helm charts
  #     run: |
  #       # Create directory structure - CHART_NAME will be determined in generate-helm.sh
  #       # Just create the base directory here
  #       mkdir -p helm-charts
  #       
  #       # Create a container from the image but don't run it
  #       # Fix the image reference by using the full path
  #       CONTAINER_ID=$(docker create ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest)
  #       
  #       # Extract the wasm.md5 file from the container
  #       mkdir -p build-artifacts
  #       docker cp $CONTAINER_ID:/app/build-artifacts/wasm.md5 build-artifacts/
  #       
  #       # Extract the WASM file from the container
  #       docker cp $CONTAINER_ID:/app/build-artifacts/application_bg.wasm build-artifacts/
  #       
  #       # Remove the container
  #       docker rm $CONTAINER_ID
  #       
  #       # Use the MD5 value from the Docker image
  #       if [ -f build-artifacts/wasm.md5 ]; then
  #         export IMAGE_VALUE="$(cat build-artifacts/wasm.md5)"
  #         echo "Using WASM MD5 from Docker image: ${IMAGE_VALUE}"
  #       else
  #         echo "ERROR: Could not extract WASM MD5 from Docker image"
  #         exit 1
  #       fi
  #       
  #       # Set CHART_NAME to REPO_LOWER if not provided
  #       if [ -z "${CHART_NAME}" ]; then
  #         export CHART_NAME="${REPO_LOWER##*/}"
  #         echo "CHART_NAME not provided, using repository name: ${CHART_NAME}"
  #       else
  #         echo "Using provided CHART_NAME: ${CHART_NAME}"
  #       fi
  #       
  #       # Run chart generation script
  #       chmod +x ./scripts/generate-helm.sh
  #       ./scripts/generate-helm.sh
  #       
  #       # Save CHART_NAME for the deploy step
  #       echo "CHART_NAME=${CHART_NAME}" >> $GITHUB_ENV
  #     env:
  #       # CHART_NAME will default to repo name if not provided
  #       CHART_NAME: ${{ vars.CHART_NAME }}
  #       CHAIN_ID: ${{ vars.CHAIN_ID }}
  #       ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS }}
  #       K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
  #       DEPLOY_VALUE: ${{ vars.DEPLOY_ENABLED }}
  #       # IMAGE_VALUE is set in the script above
  #       REMOTE_VALUE: ${{ vars.REMOTE_MODE }}
  #       AUTO_SUBMIT_VALUE: ${{ vars.AUTO_SUBMIT }}
  #       STORAGE_CLASS_NAME: ${{ vars.STORAGE_CLASS_NAME || 'csi-disk' }}
  #       CREATOR_ONLY_ADD_PROVE_TASK: ${{ vars.CREATOR_ONLY_ADD_PROVE_TASK || 'true' }}
  #       K8S_SECRET_NAME: ${{ vars.K8S_SECRET_NAME }}
  #       SERVER_ADMIN_KEY: ${{ secrets.SERVER_ADMIN_KEY }}
  #       SETTLER_PRIVATE_ACCOUNT: ${{ secrets.SETTLER_PRIVATE_ACCOUNT }}
  #       USER_ADDRESS: ${{ secrets.USER_ADDRESS || '' }}
        
  #   - name: Deploy to Kubernetes
  #     run: |
  #       # Debug GitHub variables
  #       echo "Checking GitHub variables..."
  #       echo "K8S_NAMESPACE from vars: '${{ vars.K8S_NAMESPACE }}'"
  #       echo "K8S_NAMESPACE from env: '${K8S_NAMESPACE}'"
  #       
  #       # Use K8S_NAMESPACE from environment variable if set, otherwise use the GitHub variable, with zkwasm as fallback
  #       NAMESPACE="${K8S_NAMESPACE:-${{ vars.K8S_NAMESPACE }}}"
  #       NAMESPACE="${NAMESPACE:-zkwasm}"
  #       echo "Using namespace: ${NAMESPACE}"
  #       
  #       # Create namespace if it doesn't exist
  #       kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
  #       
  #       # Get secret name
  #       SECRET_NAME="${K8S_SECRET_NAME:-${{ vars.K8S_SECRET_NAME }}}"
  #       SECRET_NAME="${SECRET_NAME:-app-secrets}"
  #       echo "Using secret name: ${SECRET_NAME}"
  #       
  #       # Create secret with required keys - using a simpler approach
  #       echo "Creating Kubernetes secret..."
  #       
  #       # Create the secret directly with kubectl
  #       kubectl create secret generic ${SECRET_NAME} \
  #         --namespace=${NAMESPACE} \
  #         --from-literal=SERVER_ADMIN_KEY="${{ secrets.SERVER_ADMIN_KEY }}" \
  #         --from-literal=SETTLER_PRIVATE_ACCOUNT="${{ secrets.SETTLER_PRIVATE_ACCOUNT }}" \
  #         --from-literal=USER_PRIVATE_ACCOUNT="${{ secrets.SETTLER_PRIVATE_ACCOUNT }}" \
  #         --from-literal=USER_ADDRESS="${{ secrets.USER_ADDRESS || '' }}" \
  #         --dry-run=client -o yaml | kubectl apply -f -
  #       
  #       # Debug info
  #       echo "Deploying Helm chart from: ./helm-charts/${CHART_NAME}"
  #       ls -la ./helm-charts/
  #       
  #       # Deploy using Helm
  #       helm upgrade --install zkwasm-exchange \
  #         ./helm-charts/${CHART_NAME} \
  #         --namespace=${NAMESPACE} \
  #         --atomic \
  #         --timeout 5m
  #     env:
  #       KUBERNETES_CLUSTER: ${{ secrets.CLUSTER_NAME }}
