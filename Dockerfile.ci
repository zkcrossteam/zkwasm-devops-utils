# syntax=docker/dockerfile:1.4
# Build stage
FROM node:18-bullseye as builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    pkg-config \
    libssl-dev \
    binaryen \
    && rm -rf /var/lib/apt/lists/*

# Install Rust toolchain
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Install wasm-pack
RUN curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

# Copy package files
COPY ts/package.json ts/package-lock.json ts/tsconfig.json ts/
COPY Cargo.toml Cargo.lock rust-toolchain ./

# Copy all source code and scripts
COPY src/ src/
COPY ts/src/ ts/src/
COPY scripts/publish.sh scripts/publish.sh
COPY scripts/clean_env.sh scripts/clean_env.sh
COPY scripts/init_admin.sh scripts/init_admin.sh
COPY Makefile ./

# Make scripts executable
RUN chmod +x scripts/publish.sh scripts/clean_env.sh

# Step 1: Install npm dependencies and build TypeScript first
RUN cd ts && npm ci && npx tsc

# Step 2: Generate admin.pubkey using init_admin.js
RUN --mount=type=secret,id=SERVER_ADMIN_KEY,required=false \
    mkdir -p ./src && \
    if [ -s /run/secrets/SERVER_ADMIN_KEY ]; then \
        echo "Using SERVER_ADMIN_KEY from GitHub secrets"; \
        # Set environment variable for init_admin.js from the secret
        export SERVER_ADMIN_KEY=$(cat /run/secrets/SERVER_ADMIN_KEY); \
        \
        # Generate admin.pubkey using init_admin.js
        node ./ts/node_modules/zkwasm-ts-server/src/init_admin.js ./src/admin.pubkey; \
        \
        # Clear the environment variable
        unset SERVER_ADMIN_KEY; \
    else \
        echo "WARNING: SERVER_ADMIN_KEY not found in GitHub secrets. Using default key for development only."; \
        echo "THIS SHOULD NOT BE USED IN PRODUCTION!"; \
        \
        # Generate admin.pubkey using init_admin.js with its internal fallback
        # No need to provide SERVER_ADMIN_KEY, it will use the default key
        node ./ts/node_modules/zkwasm-ts-server/src/init_admin.js ./src/admin.pubkey; \
    fi

# Verify that admin.pubkey was created successfully
RUN ls -la ./src/admin.pubkey

# Step 3: Build WASM artifacts and generate MD5 for CI notifications
RUN wasm-pack build --release --out-name application --out-dir pkg && \
    wasm-opt -Oz -o ./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm pkg/application_bg.wasm && \
    cp pkg/application_bg.wasm ./ts/node_modules/zkwasm-ts-server/src/application/ && \
    cp pkg/application_bg.wasm.d.ts ./ts/node_modules/zkwasm-ts-server/src/application/ && \
    # Generate MD5 for CI notifications
    md5sum ./ts/node_modules/zkwasm-ts-server/src/application/application_bg.wasm | \
    awk '{print toupper($1)}' > ./ts/wasm.md5

# Step 4: Handle publishing of WASM binary with publish.sh
ARG CHAIN_ID="11155111"
ARG CREATOR_ONLY_ADD_PROVE_TASK="true"

# Use clean_env.sh script to sanitize and handle environment variables
RUN --mount=type=secret,id=SETTLER_PRIVATE_ACCOUNT,required=false \
    --mount=type=secret,id=USER_ADDRESS,required=false \
    if [ -s /run/secrets/USER_ADDRESS ] && [ -s /run/secrets/SETTLER_PRIVATE_ACCOUNT ]; then \
        echo "Using USER_ADDRESS and SETTLER_PRIVATE_ACCOUNT from GitHub secrets"; \
        cd ts && \
        export USER_ADDRESS="$(cat /run/secrets/USER_ADDRESS)" && \
        export USER_PRIVATE_ACCOUNT="$(cat /run/secrets/SETTLER_PRIVATE_ACCOUNT)" && \
        export SETTLER_PRIVATE_ACCOUNT="$USER_PRIVATE_ACCOUNT" && \
        export CHAIN_ID="${CHAIN_ID}" && \
        export CREATOR_ONLY_ADD_PROVE_TASK="${CREATOR_ONLY_ADD_PROVE_TASK}" && \
        ../scripts/clean_env.sh && \
        NODE_OPTIONS="--preserve-symlinks --no-warnings --no-deprecation" \
        npm_config_legacy_peer_deps=true \
        npm_config_package_lock=false \
        npm_config_audit=false \
        npm_config_fund=false \
        npm_config_update_notifier=false \
        npm_config_strict_ssl=false \
        ../scripts/publish.sh || { echo "Publishing failed with exit code $?"; exit 1; } && \
        shred -u .env && \
        cd ..; \
    elif [ -s /run/secrets/USER_ADDRESS ] && [ ! -s /run/secrets/SETTLER_PRIVATE_ACCOUNT ]; then \
        echo "WARNING: USER_ADDRESS found but SETTLER_PRIVATE_ACCOUNT missing in GitHub secrets"; \
        echo "Skipping publishing - both secrets are required"; \
    elif [ ! -s /run/secrets/USER_ADDRESS ] && [ -s /run/secrets/SETTLER_PRIVATE_ACCOUNT ]; then \
        echo "WARNING: SETTLER_PRIVATE_ACCOUNT found but USER_ADDRESS missing in GitHub secrets"; \
        echo "Skipping publishing - both secrets are required"; \
    else \
        echo "INFO: No publishing credentials found in GitHub secrets"; \
        echo "Skipping publishing step - this is normal for builds without deployment"; \
    fi

# Production stage
FROM node:18-slim

WORKDIR /app

ENV NODE_ENV="production"

# Create non-root user first
RUN groupadd -r appuser && useradd -r -g appuser -m appuser

# Create necessary directories
RUN mkdir -p /app/ts /app/src

# Copy application files with proper permissions
COPY --from=builder --chown=appuser:appuser /app/ts/ /app/ts/
COPY --from=builder --chown=appuser:appuser /app/src/admin.pubkey /app/src/admin.pubkey

# Set proper permissions (with error handling)
RUN chmod -R 550 ./ts/src 2>/dev/null || echo "Warning: Could not set permissions on ts/src" && \
    chmod 440 ./src/admin.pubkey 2>/dev/null || echo "Warning: Could not set permissions on admin.pubkey" && \
    chmod 440 ./ts/wasm.md5 2>/dev/null || echo "Warning: Could not set permissions on wasm.md5"

# Switch to non-root user
USER appuser

EXPOSE 3000
CMD ["node", "./ts/src/service.js"]